{
  "openapi": "3.0.3",
  "info": {
    "title": "Kantinerado API",
    "description": "\nDie API stellt eine Schnittstelle zwischen dem Front- und dem Backend der Kantinerado Web-App bereit. ",
    "contact": {
      "email": "kirchert.tin22@student.dhbw-heidenheim.de"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:5000"
    }
  ],
  "tags": [
    {
      "name": "dishes",
      "description": "routes regarding dishes"
    },
    {
      "name": "users",
      "description": "routes regarding user"
    },
    {
      "name": "allergies",
      "description": "routes regarding allergies"
    },
    {
      "name": "orders",
      "description": "routes regarding orders"
    },
    {
      "name": "mealplans",
      "description": "routes regarding mealplans"
    },
    {
      "name": "dishsuggestions",
      "description": "routes regarding dishsuggestions"
    },
    {
      "name": "others",
      "description": "other routes"
    }
  ],
  "paths": {
    "/dish_by_mealType/{dish_mealType}": {
      "get": {
        "tags": [
          "dishes"
        ],
        "summary": "returns dish by name",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dish_mealType",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "name of the dish to get"
          }
        ],
        "responses": {
          "200": {
            "description": "returned dish succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Dish_with_Id"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "dish not found"
          }
        }
      }
    },
    "/create_dish": {
      "post": {
        "tags": [
          "dishes"
        ],
        "summary": "creates a new dish",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "creates dish.",
        "requestBody": {
          "description": "create a dish",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dish"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "dish Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Dish succesfully created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "wrong Input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "wrong Input"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/create_user": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "creates a new user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "creates user.",
        "requestBody": {
          "description": "create a user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "user succesfully created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "wrong Input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing required fields"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/create_user_as_admin": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "creates a new user as admin",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "creates user as admin.",
        "requestBody": {
          "description": "create a user as admin",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "user created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "user succesfully created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "wrong Input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing required fields"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/user_by_id/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "returns User by Id",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the user to get"
          }
        ],
        "responses": {
          "200": {
            "description": "returned user succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_with_Id"
                }
              }
            }
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    },
    "/allergy_by_userid/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "returns allergy of a user by user_id",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the user to get allergies"
          }
        ],
        "responses": {
          "200": {
            "description": "returned allergy succesfully'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allergies": {
                      "type": "string",
                      "example": "nuts"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    },
    "/set_user_allergies": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Set user allergies",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allergies": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/allergy"
                    },
                    "example": [
                      "nuts",
                      "gluten",
                      "lactose"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Allergies successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Allergies successfully updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Fill in all required fields"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unable to update allergies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Could not update allergies"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Benutzeranmelde-Endpunkt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "mypassword"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ein JWT-Token zur Authentifizierung"
          },
          "400": {
            "description": "Fehlende JSON-Anfrage oder fehlender Benutzername oder Passwort"
          },
          "401": {
            "description": "Falscher Benutzername oder Passwort"
          }
        }
      }
    },
    "/all_allergies": {
      "get": {
        "tags": [
          "allergies"
        ],
        "summary": "returns all allergies from the database",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "allergies found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allergyList": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/allergy"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "no allergies found"
          }
        }
      }
    },
    "/create_meal_plan": {
      "post": {
        "tags": [
          "mealplans"
        ],
        "summary": "creates a mealplan",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mealPlan": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dishID": {
                          "type": "integer",
                          "example": 1
                        },
                        "date": {
                          "type": "string",
                          "example": "2024-12-17"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "meal plan precessed succesfully"
          },
          "400": {
            "description": "missing required fields"
          },
          "420": {
            "description": "invalid input"
          }
        }
      }
    },
    "/meal_plan/{start_date}/{end_date}": {
      "get": {
        "tags": [
          "mealplans"
        ],
        "summary": "returns a list of all mealPlans in given timespan grouped by day",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "start_date",
            "schema": {
              "type": "string",
              "example": "2024-03-12"
            },
            "required": true,
            "description": "startdate in Format YYYY-MM-DD"
          },
          {
            "in": "path",
            "name": "end_date",
            "schema": {
              "type": "string",
              "example": "2024-03-13"
            },
            "required": true,
            "description": "enddate in Format YYYY-MM-DD"
          }
        ],
        "responses": {
          "201": {
            "description": "returned mealPlans succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dishes": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Dish_with_Id"
                        }
                      },
                      "mealPlanDate": {
                        "type": "string",
                        "example": "Tue, 17 Dec 2024 00:00:00 GMT"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "missing required fields"
          },
          "420": {
            "description": "couldn't get mealPlans"
          }
        }
      }
    },
    "/create_order": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "creates an order",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "order created/updates succesfull"
          },
          "400": {
            "description": "missing required fields"
          },
          "500": {
            "description": "Failed to create order"
          }
        }
      }
    },
    "/orders_by_user/{start_date}/{end_date}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "returns orders of sorted by users in a certain timespan",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "start_date",
            "schema": {
              "type": "string",
              "example": "2024-03-12"
            },
            "required": true,
            "description": "startdate in Format YYYY-MM-DD"
          },
          {
            "in": "path",
            "name": "end_date",
            "schema": {
              "type": "string",
              "example": "2024-03-13"
            },
            "required": true,
            "description": "enddate in Format YYYY-MM-DD"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully got orders"
          },
          "404": {
            "description": "no orders found in selected timespan"
          }
        }
      }
    },
    "/orders_sorted_by_dish/{start_date}/{end_date}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "returns orders of sorted by dishes in a certain timespan",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "start_date",
            "schema": {
              "type": "string",
              "example": "2024-03-12"
            },
            "required": true,
            "description": "startdate in Format YYYY-MM-DD"
          },
          {
            "in": "path",
            "name": "end_date",
            "schema": {
              "type": "string",
              "example": "2024-03-13"
            },
            "required": true,
            "description": "enddate in Format YYYY-MM-DD"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully got orders"
          },
          "404": {
            "description": "no orders found in selected timespan"
          }
        }
      }
    },
    "/get_this_week": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "returns this week",
        "responses": {
          "201": {
            "description": "returned this succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "monday": {
                      "type": "string",
                      "example": "2024-01-01"
                    },
                    "sunday": {
                      "type": "string",
                      "example": "2024-01-07"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_next_week": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "returns next week",
        "responses": {
          "201": {
            "description": "returned next succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "monday": {
                      "type": "string",
                      "example": "2024-01-08T00:00:00.000Z"
                    },
                    "sunday": {
                      "type": "string",
                      "example": "2024-01-014"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create_dish_suggestion": {
      "post": {
        "summary": "Create a new dish suggestion",
        "description": "Creates a new dish suggestion by providing name, ingredients, image, and description.",
        "tags": [
          "dishsuggestions"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Daten, die zum Erstellen eines neuen Gerichtsvorschlags erforderlich sind",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DishSuggestion"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Gerichtsvorschlag erfolgreich erstellt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "SUCCESS: Gerichtsvorschlag erfolgreich erstellt"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Fehlende erforderliche Felder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "ERROR: Fülle alle erforderliche Felder aus"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Gerichtsvorschlag konnte nicht erstellt werden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "ERROR: Gerichtsvorschlag konnte nicht erstellt werden"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/all_dish_suggestions": {
      "get": {
        "summary": "Retrieve all dish suggestions",
        "description": "Fetches a list of all available dish suggestions.",
        "tags": [
          "dishsuggestions"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all dish suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DishSuggestion_with_Id_and_date"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Keinen Gerichtsvorschlag gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "ERROR: Keinen Gerichtsvorschlag gefunden"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delete_dish_suggestion/{dishSuggestion_ID}": {
      "get": {
        "summary": "Delete a dish suggestion",
        "description": "Deletes a dish suggestion based on the provided dish suggestion ID.",
        "tags": [
          "dishsuggestions"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dishSuggestion_ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the dish suggestion to delete"
          }
        ],
        "responses": {
          "201": {
            "description": "Dish suggestion successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "SUCCESS: Gerichtsvorschlag erfolgreich gelöscht"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Dish suggestion not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "ERROR: Gerichtsvorschlag nicht gefunden"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accept_dish_suggestion": {
      "post": {
        "summary": "Accept a dish suggestion and create a new dish",
        "description": "Accepts a dish suggestion and creates a new dish based on the provided details. Deletes the suggestion upon success.",
        "tags": [
          "dishsuggestions"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data required to accept the dish suggestion and create a new dish.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "dishSuggestionID",
                  "dishData"
                ],
                "properties": {
                  "dishSuggestionID": {
                    "type": "integer",
                    "example": 1
                  },
                  "dishData": {
                    "$ref": "#/components/schemas/Dish"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dish successfully created and suggestion deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "SUCCESS: Gericht erfolgreich erstellt. Gerichtsvorschlag erfolgreich gelöscht"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields or dish already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "ERROR: Fülle alle erforderlichen Felder aus"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Dish could not be created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "ERROR: Gericht konnte nicht erstellt werden"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": [
          "e-mail",
          "second_name",
          "first_name",
          "role"
        ],
        "properties": {
          "email": {
            "type": "string",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "example": "mypassword"
          },
          "firstName": {
            "type": "string",
            "example": "Aaron"
          },
          "lastName": {
            "type": "string",
            "example": "Seidl"
          },
          "role": {
            "type": "string",
            "example": "admin"
          },
          "allergies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Gluten",
              "Lactose",
              "Nuts"
            ]
          }
        }
      },
      "User_with_Id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "Id": {
                "type": "number",
                "example": 1234
              }
            }
          }
        ]
      },
      "Dish": {
        "required": [
          "name",
          "ingredients",
          "dietaryCategory",
          "mealtype",
          "allergies",
          "price",
          "mealType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Pizza"
          },
          "price": {
            "type": "number",
            "example": 12.34
          },
          "allergies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "nuts",
              "Lactose"
            ]
          },
          "ingredients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "dough",
              "cheese",
              "tamatosauce"
            ]
          },
          "dietaryCategory": {
            "type": "string",
            "example": "italian"
          },
          "mealType": {
            "type": "string",
            "example": "Main"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "example": "insert base 64 string or remove image-key from json"
          }
        }
      },
      "Dish_with_Id": {
        "required": [
          "dish_id"
        ],
        "allOf": [
          {
            "type": "object",
            "properties": {
              "dish_id": {
                "type": "number",
                "example": 1234
              }
            }
          },
          {
            "$ref": "#/components/schemas/Dish"
          }
        ]
      },
      "allergy": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "number",
            "example": 1234
          },
          "name": {
            "type": "string",
            "example": "nuts"
          }
        }
      },
      "order": {
        "type": "object",
        "properties": {
          "mealPlanID": {
            "type": "number",
            "example": 1234
          },
          "amount": {
            "type": "number",
            "example": 1
          }
        }
      },
      "DishSuggestion": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "test Suggestion"
          },
          "ingredients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "dough",
              "cheese",
              "tamatosauce"
            ]
          },
          "image": {
            "type": "string",
            "format": "binary",
            "example": "insert base 64 string or remove image-key from json"
          },
          "description": {
            "type": "string",
            "example": "a description to further describe the dish suggestion"
          }
        }
      },
      "DishSuggestion_with_Id_and_date": {
        "required": [
          "dishSuggestionID",
          "date"
        ],
        "allOf": [
          {
            "type": "object",
            "properties": {
              "dishSuggestionID": {
                "type": "number",
                "example": 1234
              },
              "date": {
                "type": "string",
                "format": "date",
                "example": "2024-01-01T00:00:00.000Z"
              }
            }
          },
          {
            "$ref": "#/components/schemas/DishSuggestion"
          }
        ]
      }
    }
  }
}